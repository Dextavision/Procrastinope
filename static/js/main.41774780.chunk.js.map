{"version":3,"sources":["components/Description/Description.js","components/Button/Button.js","components/Progressbar/Progressbar.js","components/Timer/Timer.js","components/FinishAlert/FinishAlert.js","components/Pomodoro/Pomodoro.js","App.js","serviceWorker.js","index.js"],"names":["Description","className","Button","startPomodoro","time","useState","error","setError","onClick","Progressbar","props","setPomoFinished","resetPomo","countdown","setCountdown","useEffect","interval","setInterval","newCountdown","Number","toFixed","clearInterval","endPomodoro","percent","strokeWidth","trailWidth","trailColor","strokeColor","Timer","setPomoTime","started","type","placeholder","readOnly","onChange","e","FinishAlert","Pomodoro","setTime","setStarted","finished","setFinished","$event","target","value","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"kVAYeA,MATf,WACE,OACE,yBAAKC,UAAU,eACb,wBAAIA,UAAU,SAAd,iBACA,wBAAIA,UAAU,oBAAd,yB,OC8BSC,G,YAjCA,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,cAAeC,EAAW,EAAXA,KAAW,EAChBC,oBAAS,GADO,mBACnCC,EADmC,KAC5BC,EAD4B,KAO1C,OAAIH,EAAO,EAEP,kBAAC,WAAD,KACE,uBAAGH,UAAU,eAAeO,QAAS,WANzCD,GAAS,KAOH,+BACA,+BACA,+BACA,+BAJF,SAOCD,GAAS,wDAKZ,uBAAGE,QAAS,kBAAML,GAAc,KAC9B,+BACA,+BACA,+BACA,+BAJF,W,eCiBSM,EAvCK,SAACC,GAAW,IACtBN,EAAqCM,EAArCN,KAAMO,EAA+BD,EAA/BC,gBAAiBC,EAAcF,EAAdE,UADF,EAGKP,mBAAS,KAHd,mBAGtBQ,EAHsB,KAGXC,EAHW,KAyB7B,OAZAC,qBAAU,WACR,IAAMC,EAAWC,aAAY,WAC3BJ,EAAY,EACRC,GAAa,SAACI,GAAD,OACXC,OAAOD,EAAe,KAAc,GAAPd,IAAYgB,QAAQ,MAZvC,SAACJ,GACnBK,cAAcL,GAEdF,EAAa,GACbH,GAAgB,GAChBC,IASMU,CAAYN,KACf,KAEH,OAAO,kBAAMK,cAAcL,OAI3B,yBAAKf,UAAU,YACb,kBAAC,IAAD,CACEsB,QAASV,EACTW,YAAY,KACZC,WAAW,KACXC,WAAW,QACXC,YAAY,UACZ1B,UAAU,a,MCZH2B,MAtBf,YAA0C,IAAzBC,EAAwB,EAAxBA,YACf,OADuC,EAAXC,QAcxB,yBAAK7B,UAAU,SACb,oCACA,2BAAO8B,KAAK,SAASC,YAAY,MAAMC,UAAQ,KAbjD,yBAAKhC,UAAU,SACb,oCACA,2BACE8B,KAAK,SACLC,YAAY,MACZE,SAAU,SAACC,GAAD,OAAON,EAAYM,QCDxBC,EARK,WAClB,OACE,6BACE,qDC6CSC,MAvCf,WAAqB,IAAD,EACMhC,mBAAS,GADf,mBACXD,EADW,KACLkC,EADK,OAEYjC,oBAAS,GAFrB,mBAEXyB,EAFW,KAEFS,EAFE,OAGclC,oBAAS,GAHvB,mBAGXmC,EAHW,KAGDC,EAHC,KAsBlB,OACE,yBAAKxC,UAAU,YACb,wBAAIA,UAAU,eAAd,oBACA,kBAAC,EAAD,CAAQE,cAZU,WACpBsC,GAAY,GACZF,GAAW,IAU6BnC,KAAMA,IAC5C,kBAAC,EAAD,CAAOyB,YArBS,SAACa,GACnBJ,EAAQI,EAAOC,OAAOC,QAoBad,QAASA,IACzCA,GACC,kBAAC,EAAD,CACE1B,KAAMA,EACNO,gBArBgB,WACtB8B,GAAY,IAqBN7B,UAbU,WAChB2B,GAAW,MAeRC,GAAY,kBAAC,EAAD,QC7BJK,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxD,GACLyD,QAAQzD,MAAMA,EAAM0D,c","file":"static/js/main.41774780.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Description.scss\";\r\n\r\nfunction Description() {\r\n  return (\r\n    <div className='description'>\r\n      <h1 className='title'>Procrastinope</h1>\r\n      <h2 className='description-text'>Get some work done!</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Description;\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { useState, Fragment } from \"react\";\r\nimport \"./Button.scss\";\r\n\r\nconst Button = ({ startPomodoro, time }) => {\r\n  const [error, setError] = useState(false);\r\n\r\n  const timeError = () => {\r\n    setError(true);\r\n  };\r\n\r\n  if (time < 1) {\r\n    return (\r\n      <Fragment>\r\n        <a className=\"link-pointer\" onClick={() => timeError()}>\r\n          <span></span>\r\n          <span></span>\r\n          <span></span>\r\n          <span></span>\r\n          START\r\n        </a>\r\n        {error && <h1>Please set a valid time</h1>}\r\n      </Fragment>\r\n    );\r\n  } else {\r\n    return (\r\n      <a onClick={() => startPomodoro(true)}>\r\n        <span></span>\r\n        <span></span>\r\n        <span></span>\r\n        <span></span>\r\n        START\r\n      </a>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Button;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Progressbar.scss\";\r\nimport { Circle } from \"rc-progress\";\r\n\r\nconst Progressbar = (props) => {\r\n  const { time, setPomoFinished, resetPomo } = props;\r\n\r\n  const [countdown, setCountdown] = useState(100);\r\n\r\n  const endPomodoro = (interval) => {\r\n    clearInterval(interval);\r\n    // Reset Progressbar\r\n    setCountdown(0);\r\n    setPomoFinished(true);\r\n    resetPomo();\r\n  };\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      countdown > 0\r\n        ? setCountdown((newCountdown) =>\r\n            Number(newCountdown - 100 / (time * 60)).toFixed(2)\r\n          )\r\n        : endPomodoro(interval);\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  });\r\n\r\n  return (\r\n    <div className='progress'>\r\n      <Circle\r\n        percent={countdown}\r\n        strokeWidth='10'\r\n        trailWidth='10'\r\n        trailColor='white'\r\n        strokeColor='#6ff403'\r\n        className='adjust'\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Progressbar;\r\n","import React from \"react\";\r\nimport \"./Timer.scss\";\r\n\r\nfunction Timer({ setPomoTime, started }) {\r\n  if (!started) {\r\n    return (\r\n      <div className='timer'>\r\n        <h1>Time</h1>\r\n        <input\r\n          type='number'\r\n          placeholder='min'\r\n          onChange={(e) => setPomoTime(e)}\r\n        ></input>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className='timer'>\r\n        <h1>Time</h1>\r\n        <input type='number' placeholder='min' readOnly></input>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import React from \"react\";\r\n\r\nconst FinishAlert = () => {\r\n  return (\r\n    <div>\r\n      <h1>Finished! Good Job!</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FinishAlert;\r\n","import React, { useState } from \"react\";\r\nimport \"./Pomodoro.scss\";\r\nimport Button from \"../Button/Button\";\r\nimport Progressbar from \"../Progressbar/Progressbar\";\r\nimport Timer from \"../Timer/Timer\";\r\nimport FinishAlert from \"../FinishAlert/FinishAlert\";\r\n\r\n// TODOs\r\n// Design changes\r\n// Promodoro Counter\r\n\r\nfunction Pomodoro() {\r\n  const [time, setTime] = useState(0);\r\n  const [started, setStarted] = useState(false);\r\n  const [finished, setFinished] = useState(false);\r\n\r\n  const setPomoTime = ($event) => {\r\n    setTime($event.target.value);\r\n  };\r\n\r\n  const setPomoFinished = () => {\r\n    setFinished(true);\r\n  };\r\n\r\n  const startPomodoro = () => {\r\n    setFinished(false);\r\n    setStarted(true);\r\n  };\r\n\r\n  const resetPomo = () => {\r\n    setStarted(false);\r\n  };\r\n\r\n  return (\r\n    <div className='pomodoro'>\r\n      <h2 className='pomo-header'>Pomodoro Section</h2>\r\n      <Button startPomodoro={startPomodoro} time={time} />\r\n      <Timer setPomoTime={setPomoTime} started={started} />\r\n      {started && (\r\n        <Progressbar\r\n          time={time}\r\n          setPomoFinished={setPomoFinished}\r\n          resetPomo={resetPomo}\r\n        />\r\n      )}\r\n      {finished && <FinishAlert />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pomodoro;\r\n","import React from \"react\";\nimport \"./App.scss\";\n\n// Components\nimport Description from \"./components/Description/Description\";\nimport Pomodoro from \"./components/Pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div>\n      <Description />\n      <Pomodoro />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}