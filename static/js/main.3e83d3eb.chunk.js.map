{"version":3,"sources":["components/Description/Description.js","components/Button/Button.js","components/Countdown/Countdown.js","components/Progressbar/Progressbar.js","components/Timer/Timer.js","components/FinishAlert/FinishAlert.js","components/Counter/Counter.js","components/Pomodoro/Pomodoro.js","App.js","serviceWorker.js","index.js"],"names":["Description","className","Button","startPomodoro","time","useState","error","setError","onClick","Countdown","startTime","setTime","seconds","setSeconds","minutes","setMinutes","useEffect","interval","setInterval","Math","floor","console","log","clearInterval","Progressbar","props","setPomoFinished","resetPomo","countdown","setCountdown","newCountdown","Number","toFixed","endPomodoro","percent","strokeWidth","trailWidth","trailColor","strokeColor","Timer","setPomoTime","started","type","placeholder","readOnly","onChange","e","FinishAlert","Counter","Pomodoro","setStarted","finished","setFinished","$event","target","value","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3e83d3eb.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Description.scss\";\n\nfunction Description() {\n  return (\n    <div className='description'>\n      <h1 className='title'>Procrastinope</h1>\n      <h2 className='description-text'>Get some work done!</h2>\n    </div>\n  );\n}\n\nexport default Description;\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React, { useState, Fragment } from \"react\";\nimport \"./Button.scss\";\n\nconst Button = ({ startPomodoro, time }) => {\n  const [error, setError] = useState(false);\n\n  const timeError = () => {\n    setError(true);\n  };\n\n  if (time < 1) {\n    return (\n      <Fragment>\n        <a className=\"link-pointer\" onClick={() => timeError()}>\n          <span></span>\n          <span></span>\n          <span></span>\n          <span></span>\n          START\n        </a>\n        {error && <h1>Please set a valid time</h1>}\n      </Fragment>\n    );\n  } else {\n    return (\n      <a onClick={() => startPomodoro(true)}>\n        <span></span>\n        <span></span>\n        <span></span>\n        <span></span>\n        START\n      </a>\n    );\n  }\n};\n\nexport default Button;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Countdown.scss\";\n\nconst Countdown = ({ startTime }) => {\n  const [time, setTime] = useState(startTime * 60);\n  const [seconds, setSeconds] = useState(0);\n  const [minutes, setMinutes] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setMinutes(Math.floor(time / 60));\n      setSeconds(time % 60);\n      setTime(time - 1);\n      console.log(minutes, seconds, time);\n    }, 1000);\n\n    return () => clearInterval(interval);\n  });\n\n  return (\n    <div>\n      <h1>{`${minutes}:${seconds}`}</h1>\n    </div>\n  );\n};\n\nexport default Countdown;\n","import React, { useState, useEffect } from \"react\";\nimport \"./Progressbar.scss\";\nimport { Circle } from \"rc-progress\";\nimport Countdown from \"../Countdown/Countdown\";\n\nconst Progressbar = (props) => {\n  const { time, setPomoFinished, resetPomo } = props;\n\n  const [countdown, setCountdown] = useState(100);\n\n  const endPomodoro = (interval) => {\n    clearInterval(interval);\n    // Reset Progressbar\n    setCountdown(0);\n    setPomoFinished(true);\n    resetPomo();\n  };\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      countdown > 0\n        ? setCountdown((newCountdown) =>\n            Number(newCountdown - 100 / (time * 60)).toFixed(2)\n          )\n        : endPomodoro(interval);\n    }, 1000);\n\n    return () => clearInterval(interval);\n  });\n\n  return (\n    <div className='progress'>\n      <Countdown startTime={time} />\n      <Circle\n        percent={countdown}\n        strokeWidth='10'\n        trailWidth='10'\n        trailColor='white'\n        strokeColor='#6ff403'\n        className='adjust'\n      />\n    </div>\n  );\n};\n\nexport default Progressbar;\n","import React from \"react\";\nimport \"./Timer.scss\";\n\nfunction Timer({ setPomoTime, started }) {\n  if (!started) {\n    return (\n      <div className='timer'>\n        <h1>Time</h1>\n        <input\n          type='number'\n          placeholder='min'\n          onChange={(e) => setPomoTime(e)}\n        ></input>\n      </div>\n    );\n  } else {\n    return (\n      <div className='timer'>\n        <h1>Time</h1>\n        <input type='number' placeholder='min' readOnly></input>\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n","import React from \"react\";\n\nconst FinishAlert = () => {\n  return (\n    <div>\n      <h1>Finished! Good Job!</h1>\n    </div>\n  );\n};\n\nexport default FinishAlert;\n","import React from \"react\";\nimport \"./Counter.scss\";\n\nconst Counter = () => {\n  return (\n    <div>\n      <h2 className='counter-header'>Your finished Pomodoros:</h2>\n    </div>\n  );\n};\n\nexport default Counter;\n","import React, { useState } from \"react\";\nimport \"./Pomodoro.scss\";\nimport Button from \"../Button/Button\";\nimport Progressbar from \"../Progressbar/Progressbar\";\nimport Timer from \"../Timer/Timer\";\nimport FinishAlert from \"../FinishAlert/FinishAlert\";\nimport Counter from \"../Counter/Counter\";\n\n// TODOs\n// Design changes\n// Promodoro Counter\n\nfunction Pomodoro() {\n  const [time, setTime] = useState(0);\n  const [started, setStarted] = useState(false);\n  const [finished, setFinished] = useState(false);\n\n  const setPomoTime = ($event) => {\n    setTime($event.target.value);\n  };\n\n  const setPomoFinished = () => {\n    setFinished(true);\n  };\n\n  const startPomodoro = () => {\n    setFinished(false);\n    setStarted(true);\n  };\n\n  const resetPomo = () => {\n    setStarted(false);\n  };\n\n  return (\n    <div className='pomodoro'>\n      <h2 className='pomo-header'>Pomodoro Section</h2>\n      <Button startPomodoro={startPomodoro} time={time} />\n      <Timer setPomoTime={setPomoTime} started={started} />\n      {started && (\n        <Progressbar\n          time={time}\n          setPomoFinished={setPomoFinished}\n          resetPomo={resetPomo}\n        />\n      )}\n      {finished && <FinishAlert />}\n      <Counter />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","import React from \"react\";\nimport \"./App.scss\";\n\n// Components\nimport Description from \"./components/Description/Description\";\nimport Pomodoro from \"./components/Pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div>\n      <Description />\n      <Pomodoro />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}